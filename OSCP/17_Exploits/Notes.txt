Notes
Basic Buffer Overflow

In a stack based overflow we are try to exploit a poorly written application by inserting, into memory, too many characters for the stack to store. This will cause the instruction pointer (EIP) to be overwritten by the value of our input. 

If we know the postion of the EIP within the stack we can craft an input that will overwrite that value with a pointer that we create. But how do we know how much memory space has been allocated for the initial input? Trial and error OR

Within metasploit-framework/tools we can use pattern-create.rb -l <length of desired bytes for input> to craft an input that can be used to determine the memory allocation space.

Example:
Step 1) For multithreaded applications you cannot just run gdb, you will need to capture the program as it crashes and offload the dump file, use ulimit -c unlimited. Then start the application, get the PID (ps -a <application>) and run gcore <PID> -o <outfile>. Or wait for the application to crash with your input and a core dump file should be created in the running directory of the app.

Step 2) Copy and paste the pattern created with pattern-create.rb into the input of the applicaiton (note: record the length of the pattern that you created). IF a web based applicaiton you can cat the input through a netcat session with cat <file> | nc <IP> <Port>

Step 3) gdp --core=<outfile>, now look at the character inserted at the EIP with "info reg". Now take that character and use the metasploit-framework/tool/pattern-offset.rb -q <character> -l <length of original pattern created>. The output will be the length of the buffer for that application!
